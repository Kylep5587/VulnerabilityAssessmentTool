/*****************************************
 * VAT - CIS470 Senior Project           *
 * EmailCheck.cs                         *
 * Uses haveibeenpwned.com to check      *
 *   email account for breaches          *
 *  *************************************/

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Net.Mail;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace VulnerabilityAssessmentTool
{
    public partial class EmailCheck : Form
    {
        DatabaseHelper db = new DatabaseHelper();
        string emailQuery = "SELECT Email, BreachName AS `Breach Name`, BreachDomain as `Domain`, BreachDate AS `Breach Date`, Description FROM HaveIBeenPwned";

        public EmailCheck()
        {
            InitializeComponent();
        }

        /* Creates variable that can be modified from within methods
         **************************************/
        bool scanSuccess = false;
        private void ChangeScanStatus(ref bool scanStatus)
        {
            scanSuccess = scanStatus;
        }


        /* Displays most recent search results from database
         **************************************/
        private void EmailCheck_Load(object sender, EventArgs e)
        {
            db.PopulateDGV(dgvBreaches, emailQuery);
        }

        /* Checks email against haveibeenpwned.com database
         **************************************/
        private void btnCheckEmail_Click(object sender, EventArgs e)
        {
            bool isValidEmail = false;

            // Validate email format
            try
            {
                MailAddress m = new MailAddress(txtEmailAddress.Text.ToString());
                isValidEmail = true;
            }
            catch (Exception)
            {
                isValidEmail = false;
                MessageBox.Show("Please enter a valid email address.", "Invalid Input", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }

            if (isValidEmail)
            {
                MessageBox.Show("This portion of the program is still under construction. Check back soon.", "Under Construction", MessageBoxButtons.OK, MessageBoxIcon.Information);
                btnCheckEmail.Enabled = false;
                lblScanStatus.Visible = true;
                lblScanStatus.ForeColor = Color.OrangeRed;
                lblScanStatus.Text = "Checking for breaches...";
                bwEmailCheck.RunWorkerAsync(); // Call function to check email vulnerabilities in secondary thread
            }
        }


        /* Executes email check using backgorund worker
         **************************************/
        private void bwEmailCheck_DoWork(object sender, DoWorkEventArgs e)
        {
            Application.UseWaitCursor = true;   // Set cursor to wait cursor

            // Add email address to parameters
            List<string> scriptParams = new List<string>();
            scriptParams.Add(txtEmailAddress.Text.ToString());

            if (Globals.RunPowerShellScript(Globals.PWNED_SCRIPT, scriptParams)) // Execute powershell script 
            {
                scanSuccess = true;
                ChangeScanStatus(ref scanSuccess);
            }
            else
            {
                scanSuccess = false;
                ChangeScanStatus(ref scanSuccess);
            }
        }


        /* Executed once email check completes
         **************************************/
        private void bwEmailCheck_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            btnCheckEmail.Enabled = true;
            Application.UseWaitCursor = false;  // Return to normal cursor

            if (scanSuccess)
            {
                db.PopulateDGV(dgvBreaches, emailQuery);
                lblScanStatus.Text = "Email check complete!";
                lblScanStatus.ForeColor = Color.Blue;
            }
            else
            {
                lblScanStatus.ForeColor = Color.Red;
                lblScanStatus.Text = "Email check failed.";
                MessageBox.Show("Error checking email address.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }


        /* Clears previously found breach data
         **************************************/
        private void llblClearData_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            if (db.Delete("DELETE FROM HaveIBeenPwned"))
            {
                MessageBox.Show("Breach data cleared successfully!", "Clear History", MessageBoxButtons.OK, MessageBoxIcon.Information);
                db.PopulateDGV(dgvBreaches, emailQuery);
            }
        }
    }
}
