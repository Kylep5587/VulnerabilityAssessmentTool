/*****************************************
 * VAT - CIS470 Senior Project           *
 * PortChecker.cs                        *
 * Provides report of all running ports  *
 *   on the system                       *
 *  *************************************/

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace VulnerabilityAssessmentTool
{
    public partial class PortChecker : Form
    {
        DatabaseHelper db = new DatabaseHelper();
        string portQuery = "SELECT PortNumber AS Port, Description, ScanDate as `Scan Date` FROM PortScanResults";

        public PortChecker()
        {
            InitializeComponent();
            FindLastScan();
        }


        /* Creates variable that can be modified from within methods
         **************************************/
        bool scanSuccess = false;
        private void ChangeScanStatus(ref bool scanStatus)
        {
            scanSuccess = scanStatus;
        }


        /* Determines the date of last scan
         **************************************/
        private void FindLastScan()
        {
            DateTime lastScanDate;
            lastScanDate = db.GetDate("SELECT TOP 1 MAX(ScanDate) FROM PortScanResults");
            if (lastScanDate < DateTime.Now) // lastScanDate will be two days from now if no scan date found
            {
                lblLastScan.Text = lastScanDate.ToString();

                // Show "No open ports found" message if scan date found but no port description is set
                string portDescription = db.GetString("SELECT TOP 1 Description FROM PortScanResults");
                if (portDescription == "" || portDescription == null)
                {
                    dgvPorts.Visible = false;
                    lblNoPortsMessage.Visible = true;
                }
                else
                {
                    db.PopulateDGV(dgvPorts, portQuery);
                    lblNoPortsMessage.Visible = false;
                    dgvPorts.Visible = true;
                }
            }
            else
                lblLastScan.Text = "Never";
            
        }


        /* Executes port scan when user clicks "Scan" button
         **************************************/
        private void btnScan_Click(object sender, EventArgs e)
        {
            btnScan.Enabled = false;            // Disable scan button while scan active
            lblScanStatus.Visible = true;
            lblScanStatus.ForeColor = Color.OrangeRed;
            lblScanStatus.Text = "Scanning...";

            db.Delete("DELETE FROM PortScanResults");   // Delete current port scan results
            bwPortScanner.RunWorkerAsync();             // Call port scanner function in secondary thread
        }


        /* Executes port scan using backgorund worker
         **************************************/
        private void bwPortScanner_DoWork(object sender, DoWorkEventArgs e)
        {
            Application.UseWaitCursor = true;   // Sets cursor to wait cursor

            IDictionary<string, string> scriptParams = new Dictionary<string, string>();
            // Run script and modify scanSuccess variable
            if (Globals.RunPowerShellScript(Globals.PORT_SCAN_SCRIPT, scriptParams))
            {
                scanSuccess = true;
                ChangeScanStatus(ref scanSuccess);
            }
            else
            {
                scanSuccess = false;
                ChangeScanStatus(ref scanSuccess);
            }
        }


        /* Called upon port scan completion
         **************************************/
        private void bwPortScanner_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            Application.UseWaitCursor = false;  // Returns cursor to default
            btnScan.Enabled = true;             // Enable scan button

            if (scanSuccess)
            {
                FindLastScan();
                dgvPorts.Visible = true;
                lblNoPortsMessage.Visible = false;

                string portDescription = db.GetString("SELECT TOP 1 Description FROM PortScanResults");
                if (portDescription == "" || portDescription == null)
                {
                    dgvPorts.Visible = false;
                    lblNoPortsMessage.Visible = true;
                }
                else
                {
                    db.PopulateDGV(dgvPorts, portQuery);
                    lblNoPortsMessage.Visible = false;
                    dgvPorts.Visible = true;
                }

                lblScanStatus.Text = "Scan complete!";
                lblScanStatus.ForeColor = Color.Blue;
            }
            else
            {
                lblScanStatus.ForeColor = Color.Red;
                lblScanStatus.Text = "Scan failed.";
                MessageBox.Show("Error scanning ports.", "Scan Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

            btnScan.Enabled = true; // Reenable scan button
            lblScanStatus.Visible = true;
        }

    } // End class
} // End namespace
