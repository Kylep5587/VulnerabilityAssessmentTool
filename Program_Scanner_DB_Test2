#This script was created by Jason Vansickle
#This script is to pull the computer programs list and pass the informatin to an Access Database

#Database connection information
$dataSource = "C:\Users\Blue\Downloads\VulnerabilityScannerDataV2.accdb"
$dsn = "Provider=Microsoft.ACE.OLEDB.12.0; Data Source=$dataSource;Persist Security Info=False;"
$objConn = New-Object System.Data.OleDb.OleDbConnection $dsn
$objConn.Open()

#Variable for time the programs were scanned.
$ScanTime = Get-Date -format d;

#Creates a variable to hold all the applications.
$applications = Get-ItemProperty HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object -Property DisplayName,DisplayVersion,InstallDate | Where-Object {($_.DisplayName -Like "*Java* *Update*") -or ($_.DisplayName -Like "*Firefox*")}
<#
$googleVersion = (Get-Item (Get-ItemProperty 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\chrome.exe').'(Default)').VersionInfo | Select -ExpandProperty ProductVersion
if (($googleVersion -ne $null) -and ($applications.DisplayName -ne "Google Chrome")){
    $googleAdd = "" | Select DisplayName,DisplayVersion,InstallDate
    $googleAdd.DisplayName = "Google Chrome";
    $googleAdd.DisplayVersion = $googleversion;
    $googleAdd.InstallDate = $null;
    Write-Output $googleAdd
    $applications += $googleAdd
}
else{}
#>






#a loop that looks at the application list and looks for the three programs Firefox and Java. Then picks them out and puts that information into an Access Database.
foreach ($application in $applications)
{


#Create the Varibles for each part of the database
	$DisplayName = $Application.DisplayName
	$DisplayVersion = $Application.DisplayVersion
	$InstallDate = $Application.InstallDate
    if($InstallDate -eq $null)
    {
    $InstallDate = $null
    }
    else
    {
    #Change the data string into a Datetime
    $InstallDate = [datetime]::ParseExact($InstallDate.Trim(), 'yyyyMMdd', [Globalization.CultureInfo]::CreateSpecificCulture('en-GB'))
    }
    Write-Host "------------------------------------"
    Write-Host "Found Appication" $application.DisplayName
    Write-Host "Version Number" $DisplayVersion

    
    $VendorName = $application[0].DisplayName -match "^\S*"
    $ActualVendorName = $Matches[0]
    $URI = "https://cve.circl.lu/api/search/$ActualVendorName"
    
    If ([bool]($VulnerableVersions -match $DisplayVersion))
    {
    #Create the command to enter into the database.    
    $objCmd = $objConn.CreateCommand()
	$objCmd.CommandText = "INSERT INTO ApplicationList (ApplicationName,VersionNumber,InstallDate,ScanDate) VALUES (?,?,?,?)"
    #Create the parameteres for the Insert statement
    $objCmd.Parameters.AddwithValue("@ApplicationName",$DisplayName);
    $objCmd.Parameters.AddwithValue("@VersionNumber",$DisplayVersion);
    #Create an if loop to change the date to null if not install date is found.
    $objCmd.Parameters.Add("@InstallDate", [System.Data.OleDb.OleDbType]::DBdate, 225)
        if ($InstallDate -eq $null)
        {
        $objCmd.Parameters["@InstallDate"].Value = [System.DBnull]::Value;
        }
	    else
        {
        $objCmd.Parameters["@InstallDate"].Value = $InstallDate;
        }
    #Remove # when if we add scan time to the database.
    $objCmd.Parameters.AddwithValue("@ScanTime",$ScanTime);
    $objCmd.ExecuteNonQuery()

    }
    Else
    {
    write-output "$DisplayName is up to date"
    }
}
#Close the connection
$objConn.Close()


#Scan the Win32 Products for Google Chrome
$Google = (Get-Item (Get-ItemProperty 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\chrome.exe').'(Default)').VersionInfo | Select -ExpandProperty ProductVersion
Write-Output $Google
#If statement to add the Google info if it is found on the Computer
if($Google -NE $null){
    #Create the Varibles for each part of the database
	$DisplayName = "Google Chrome"
	$DisplayVersion = $Google

    #API Info
    $VendorName = $application[0].DisplayName -match "^\S*"
    $ActualVendorName = $Matches[0]
    $URI = "https://cve.circl.lu/api/search/$ActualVendorName"

    Write-Host "------------------------------------"
    Write-Host "Found Appication" $DisplayName
    Write-Host "Version Number" $DisplayVersion
    

    If ([bool]($VulnerableVersions -match $DisplayVersion))
    {
    #Open another connection to the Databsae
    $objConn.Open()
    #Create the command to enter into the database.
    $objCmd = $objConn.CreateCommand()
	$objCmd.CommandText = "INSERT INTO ApplicationList (ApplicationName,VersionNumber,InstallDate,ScanDate) VALUES (?,?,?,?)"
    #Create the parameteres for the Insert statement
    $objCmd.Parameters.AddwithValue("@ApplicationName",$DisplayName);
    $objCmd.Parameters.AddwithValue("@VersionNumber",$DisplayVersion);
    $objCmd.Parameters.Add("@InstallDate", [System.Data.OleDb.OleDbType]::DBdate, 225)
    $objCmd.Parameters["@InstallDate"].Value = [System.DBnull]::Value;
    $objCmd.Parameters.AddwithValue("@ScanTime",$ScanTime);
    $objCmd.ExecuteNonQuery()
    }
    Else
    {
    Write-Output "$DisplayName is up to date."
    }
}
Else
{

}
#Close the connection
$objConn.Close()

#Scan the Win32 Products for Google Chrome
$Firefox = (Get-Item (Get-ItemProperty 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\firefox.exe').'(Default)').VersionInfo | Select -ExpandProperty ProductVersion
#If statement to add the Google info if it is found on the Computer
if($Firefox -NE $null){
    #Create the Varibles for each part of the database
	$DisplayName = "Mozilla Firefox"
	$DisplayVersion = $firefox

    #API Info
    $VendorName = $application[0].DisplayName -match "^\S*"
    $ActualVendorName = $Matches[0]
    $URI = "https://cve.circl.lu/api/search/$ActualVendorName"

    Write-Host "------------------------------------"
    Write-Host "Found Appication" $DisplayName
    Write-Host "Version Number" $DisplayVersion
    

    If ([bool]($VulnerableVersions -match $DisplayVersion))
    {
    #Open another connection to the Databsae
    $objConn.Open()
    #Create the command to enter into the database.
    $objCmd = $objConn.CreateCommand()
	$objCmd.CommandText = "INSERT INTO ApplicationList (ApplicationName,VersionNumber,InstallDate,ScanDate) VALUES (?,?,?,?)"
    #Create the parameteres for the Insert statement
    $objCmd.Parameters.AddwithValue("@ApplicationName",$DisplayName);
    $objCmd.Parameters.AddwithValue("@VersionNumber",$DisplayVersion);
    $objCmd.Parameters.Add("@InstallDate", [System.Data.OleDb.OleDbType]::DBdate, 225)
    $objCmd.Parameters["@InstallDate"].Value = [System.DBnull]::Value;
    $objCmd.Parameters.AddwithValue("@ScanTime",$ScanTime);
    $objCmd.ExecuteNonQuery()
    }
    Else
    {
    Write-Output "$DisplayName is up to date."
    }
}
Else
{

}
#Close the connection
$objConn.Close()
