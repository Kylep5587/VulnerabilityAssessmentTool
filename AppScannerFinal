#This script was created by Jason Vansickle
#This script is to pull the computer programs list and pass the informatin to an Access Database

#Database connection information
$dataSource = "C:\Users\vansickj\Desktop\Jason\VulnerabilityScannerDataV2.accdb"
$dsn = "Provider=Microsoft.ACE.OLEDB.12.0; Data Source=$dataSource;Persist Security Info=False;"
$objConn = New-Object System.Data.OleDb.OleDbConnection $dsn

#Variable for time the programs were scanned.
$ScanTime = Get-Date -format d;

$vlcversion = (Get-Item (Get-ItemProperty 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\vlc.exe').'(Default)').VersionInfo | Select -ExpandProperty fileVersion
if ($vlcversion -ne $null){
$DisplayName = "VLC Media Player"
	
#Create the Varibles for each part of the database
$CVEData = Invoke-WebRequest -URI "https://cve.circl.lu/api/search/videolan/vlc"
$FormattedCVEData = ConvertFrom-Json -InputObject $CVEData
$VulnerableVersions = $FormattedCVEData | Select -ExpandProperty vulnerable_configuration
Write-Output $VulnerableVersions
Write-Output $DisplayVersion
    If ($VulnerableVersions -match $vlcversion)
    {
    
    $objConn.Open()
    #Create the command to enter into the database.    
    $objCmd = $objConn.CreateCommand()
	$objCmd.CommandText = "INSERT INTO ApplicationList (ApplicationName,VersionNumber,InstallDate,ScanDate) VALUES (?,?,?,?)"
    #Create the parameteres for the Insert statement
    $objCmd.Parameters.AddwithValue("@ApplicationName",$DisplayName);
    $objCmd.Parameters.AddwithValue("@VersionNumber",$vlcversion);
    #Create an if loop to change the date to null if not install date is found.
    $objCmd.Parameters.Add("@InstallDate", [System.Data.OleDb.OleDbType]::DBdate, 225)
        if ($InstallDate -eq $null)
        {
        $objCmd.Parameters["@InstallDate"].Value = [System.DBnull]::Value;
        }
	    else
        {
        $objCmd.Parameters["@InstallDate"].Value = $InstallDate;
        }
    #Remove # when if we add scan time to the database.
    $objCmd.Parameters.AddwithValue("@ScanTime",$ScanTime);
    $objCmd.ExecuteNonQuery();
    $objConn.Close()
    Write-Output "$Displayname is not up to date"
    }
    Else
    {
    write-output "$DisplayName is up to date"
    $objConn.Open()
    #Create the command to enter into the database.    
    $objCmd = $objConn.CreateCommand()
	$objCmd.CommandText = "INSERT INTO ApplicationList (ScanDate) VALUES (?)"
    $objCmd.Parameters.AddwithValue("@ScanTime",$ScanTime);
    $objCmd.ExecuteNonQuery();
    $objConn.Close()
	}
}

$firefoxversion = (Get-Item (Get-ItemProperty 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\firefox.exe').'(Default)').VersionInfo | Select -ExpandProperty ProductVersion
if ($firefoxversion -ne $null){
$DisplayName = "Mozilla Firefox"

#Create the Varibles for each part of the database
$CVEData = Invoke-WebRequest -URI "https://cve.circl.lu/api/search/mozilla/firefox"
$FormattedCVEData = ConvertFrom-Json -InputObject $CVEData
$VulnerableVersions = $FormattedCVEData | Select -ExpandProperty vulnerable_configuration
Write-Output $VulnerableVersions
Write-Output $DisplayVersion
    If ($VulnerableVersions -match $firefoxVersion)
    {
    
    $objConn.Open()
    #Create the command to enter into the database.    
    $objCmd = $objConn.CreateCommand()
	$objCmd.CommandText = "INSERT INTO ApplicationList (ApplicationName,VersionNumber,InstallDate,ScanDate) VALUES (?,?,?,?)"
    #Create the parameteres for the Insert statement
    $objCmd.Parameters.AddwithValue("@ApplicationName",$DisplayName);
    $objCmd.Parameters.AddwithValue("@VersionNumber",$firefoxversion);
    #Create an if loop to change the date to null if not install date is found.
    $objCmd.Parameters.Add("@InstallDate", [System.Data.OleDb.OleDbType]::DBdate, 225)
        if ($InstallDate -eq $null)
        {
        $objCmd.Parameters["@InstallDate"].Value = [System.DBnull]::Value;
        }
	    else
        {
        $objCmd.Parameters["@InstallDate"].Value = $InstallDate;
        }
    #Remove # when if we add scan time to the database.
    $objCmd.Parameters.AddwithValue("@ScanTime",$ScanTime);
    $objCmd.ExecuteNonQuery();
    $objConn.Close()
    Write-Output "$Displayname is not up to date"
    }
    Else
    {
    write-output "$DisplayName is up to date"
    $objConn.Open()
    #Create the command to enter into the database.    
    $objCmd = $objConn.CreateCommand()
	$objCmd.CommandText = "INSERT INTO ApplicationList (ScanDate) VALUES (?)"
    $objCmd.Parameters.AddwithValue("@ScanTime",$ScanTime);
    $objCmd.ExecuteNonQuery();
    $objConn.Close()
	}
}
$appleversion = (Get-Item (Get-ItemProperty 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\itunes.exe').'(Default)').VersionInfo | Select -ExpandProperty ProductVersion
if ($appleversion -ne $null){
$DisplayName = "Apple iTunes"
$appleversion = $appleversion -replace ".{2}$"
	
#Create the Varibles for each part of the database
$CVEData = Invoke-WebRequest -URI "https://cve.circl.lu/api/search/apple/itunes"
$FormattedCVEData = ConvertFrom-Json -InputObject $CVEData
$VulnerableVersions = $FormattedCVEData | Select -ExpandProperty vulnerable_configuration

Write-Output $VulnerableVersions
Write-Output $appleversion
    If ($VulnerableVersions -match $appleversion)
    {
    
    $objConn.Open()
    #Create the command to enter into the database.    
    $objCmd = $objConn.CreateCommand()
	$objCmd.CommandText = "INSERT INTO ApplicationList (ApplicationName,VersionNumber,InstallDate,ScanDate) VALUES (?,?,?,?)"
    #Create the parameteres for the Insert statement
    $objCmd.Parameters.AddwithValue("@ApplicationName",$DisplayName);
    $objCmd.Parameters.AddwithValue("@VersionNumber",$appleversion);
    #Create an if loop to change the date to null if not install date is found.
    $objCmd.Parameters.Add("@InstallDate", [System.Data.OleDb.OleDbType]::DBdate, 225)
        if ($InstallDate -eq $null)
        {
        $objCmd.Parameters["@InstallDate"].Value = [System.DBnull]::Value;
        }
	    else
        {
        $objCmd.Parameters["@InstallDate"].Value = $InstallDate;
        }
    #Remove # when if we add scan time to the database.
    $objCmd.Parameters.AddwithValue("@ScanTime",$ScanTime);
    $objCmd.ExecuteNonQuery();
    $objConn.Close()
    Write-Output "$Displayname is not up to date"
    }
    Else
    {
    write-output "$DisplayName is up to date"
    $objConn.Open()
    #Create the command to enter into the database.    
    $objCmd = $objConn.CreateCommand()
	$objCmd.CommandText = "INSERT INTO ApplicationList (ScanDate) VALUES (?)"
    $objCmd.Parameters.AddwithValue("@ScanTime",$ScanTime);
    $objCmd.ExecuteNonQuery();
    $objConn.Close()
	}
}
