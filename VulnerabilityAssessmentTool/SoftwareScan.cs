/*****************************************
 * VAT - CIS470 Senior Project           *
 * SoftwareScan.cs                       *
 * Provides vulnerability news related   *
 *   to software installed on the system *
 *  *************************************/

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO;                    // Required for working with files
using Microsoft.VisualBasic;


namespace VulnerabilityAssessmentTool
{
    public partial class SoftwareScan : Form
    {
        DatabaseHelper db = new DatabaseHelper();
        string vulnerabilityQuery = "SELECT ApplicationName AS Application, VersionNumber AS Version, ScanDate AS `Scan Date` FROM ApplicationList WHERE ApplicationName IS NOT NULL ORDER BY ApplicationName";


        /* Creates variable that can be modified from within methods
         **************************************/
        bool scanSuccess = false;
        private void ChangeScanStatus(ref bool scanStatus)
        {
            scanSuccess = scanStatus;
        }

        
        public SoftwareScan()
        {
            InitializeComponent();
            FindLastScan();
            lblNoVulnerabilitiesMessage.Visible = false;
        }


        /* Determine if DGV or "No vulnerabilities found" should be displayed
         **************************************/
        private void ShowData()
        {
            // Show "No vulnerable software found" message if scan date found but no application name is set
            /*string appName = db.GetString("SELECT TOP 1 ApplicationName FROM ApplicationList");
            if (appName == "" || appName == null)
            {
                dgvVulnerabilities.Visible = false;
                lblNoVulnerabilitiesMessage.Visible = true;
            }
            else
            { */
                db.PopulateDGV(dgvVulnerabilities, vulnerabilityQuery);
                //lblScanStatus.ForeColor = Color.OrangeRed;
                lblNoVulnerabilitiesMessage.Visible = false;
                dgvVulnerabilities.Visible = true;
            //}
        }


        /* Determines the date of last scan
         **************************************/
        private void FindLastScan()
        {
            DateTime lastScanDate;
            lastScanDate = db.GetDate("SELECT TOP 1 MAX(ScanDate) FROM ApplicationList");
            if (lastScanDate < DateTime.Now) // lastScanDate will be two days from now if no scan date found
            {
                lblLastScan.Text = lastScanDate.ToString();
                ShowData();
            }
            else
            {
                dgvVulnerabilities.Visible = false;
                lblLastScan.Text = "Never";
            }
        }

        /* Executes system software scan
         **************************************/
        private void btnScan_Click(object sender, EventArgs e)
        {
            btnScan.Enabled = false;            // Disable scan button while scan active
            lblScanStatus.Visible = true;
            lblScanStatus.ForeColor = Color.OrangeRed;
            lblScanStatus.Text = "Scanning...";

            db.Delete("DELETE FROM ApplicationList");   // Delete data from old scans 
            bwSoftwareScan.RunWorkerAsync();            // Executes background worker
        }
        

        /* Executes a task using backgorund worker
         **************************************/
        private void bwSoftwareScan_DoWork(object sender, DoWorkEventArgs e)
        {
            Application.UseWaitCursor = true;   // Sets cursor to wait cursor
            IDictionary<string, string> scriptParams = new Dictionary<string, string>();

            // Run script and modify scanSuccess variable 
            if (Globals.RunPowerShellScript(Globals.SOFTWARE_SCAN_SCRIPT, scriptParams))
            {
                scanSuccess = true;
                ChangeScanStatus(ref scanSuccess);
            }
            else
            {
                scanSuccess = false;
                ChangeScanStatus(ref scanSuccess);
            }
        }

        /* Can be used to update progress bar
         **************************************/
        private void bwSoftwareScan_ProgressChanged(object sender, ProgressChangedEventArgs e)
        {
            
        }


        /* Executes when background task is complete
         **************************************/
        private void bwSoftwareScan_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            Application.UseWaitCursor = false;  // Returns cursor to default
            btnScan.Enabled = true;             // Enable scan button

            if (scanSuccess)                   
            {
                FindLastScan();
                ShowData();
                lblScanStatus.Text = "Scan complete!";
                lblScanStatus.ForeColor = Color.Blue;
            }
            else
            {
                lblScanStatus.ForeColor = Color.Red;
                lblScanStatus.Text = "Scan failed.";
                MessageBox.Show("Error scanning software.", "Scan Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

            btnScan.Enabled = true; // Reenable scan button
            lblScanStatus.Visible = true;
        }

    }// End class
}// End namespace
