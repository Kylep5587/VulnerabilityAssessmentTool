#Database connection information
$dataSource = "../../VulnerabilityScannerData.accdb"
$dsn = "Provider=Microsoft.ACE.OLEDB.12.0; Data Source=$dataSource;Persist Security Info=False;"
$objConn = New-Object System.Data.OleDb.OleDbConnection $dsn
$objConn.Open()

$ProgressPreference = 'SilentlyContinue' # Improves download speed

#Have to Add Inorder for Encoder to Work
Add-Type -AssemblyName System.Web

# To Use TLS 
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::
Tls12

#API call and formatting the data to an array
Function Go-Advanced {
    [CmdletBinding()]Param([String]$Email)
}

$EncodedEmail = [System.Web.HttpUtility]::UrlEncode($Email)
$URI = "https://haveibeenpwned.com/api/v2/breachedaccount/$EncodedEmail"
$APICall =  Invoke-WebRequest -URI $URI -UserAgent Pwnage-Checker-For-Powershell
$BreachedData = $APICall.Content | ConvertFrom-Json
$BreachedData | select -Property Name,Domain,BreachDate,AddedDate,ModifiedDate,PwnCount,Description,DataClasses,IsVerified,IsSensitive,IsRetired,IsSpamList

#foreach loop to check each entry and add it to the database.
foreach ($Breach in $BreachedData)
{
    #Setting each value in the array to a variable
    $BreachName = $breach.Name  
    $BreachDomain = $Breach.Domain
    $BreachDate = $Breach.BreachDate
    $AddedDate = $Breach.AddedDate -replace ".{10}$"
    $ModifiedDate = $Breach.ModifiedDate -replace ".{10}$"
    $PwnCount = $Breach.PwnCount
    $Description = $Breach.Description
    [String]$DataClasses = $Breach.DataClasses -join ","
    [String]$IsVerified = $Breach.IsVerified
    [String]$IsSensitive = $Breach.IsSensitive
    [String]$IsRetired = $Breach.IsRetired
    [String]$IsSpamList = $Breach.IsSpamList
    
    #Setting the variable for each date to a date.
    $breachdate = [datetime]::ParseExact($breachDate, 'yyyy-MM-dd', $null)
    $ModifiedDate = [datetime]::ParseExact($ModifiedDate, 'yyyy-MM-dd', $null)
    $AddedDate = [datetime]::ParseExact($AddedDate, 'yyyy-MM-dd', $null)
    $NewDataclasses = $Dataclasses.ToString()
    $NewDataclasses = $NewDataclasses.Trim("{","}")

    #Create the command to enter into the database.
    $objCmd = $objConn.CreateCommand()
    $objCmd.CommandText = "INSERT INTO HaveIBeenPwned (BreachName,BreachDomain,BreachDate,AddedDate,ModifiedDate,PwnCount,Description,DataClasses,IsVerified,IsSensitive,IsRetired,IsSpamList,Email) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)"
    
    #Create the parameteres for the Insert statement
    $objCmd.Parameters.AddwithValue("@BreachName",$BreachName);
    $objCmd.Parameters.AddwithValue("@BreachDomain",$breachDomain);
    $objCmd.Parameters.Add("@BreachDate", [System.Data.OleDb.OleDbType]::DBdate, 225)
    $objCmd.Parameters["@BreachDate"].Value = $BreachDate;
    $objCmd.Parameters.Add("@AddedDate", [System.Data.OleDb.OleDbType]::DBdate, 225)
    $objCmd.Parameters["@AddedDate"].Value = $AddedDate;
    $objCmd.Parameters.Add("@ModifiedDate", [System.Data.OleDb.OleDbType]::DBdate, 225)
    $objCmd.Parameters["@ModifiedDate"].Value = $ModifiedDate;
    $objCmd.Parameters.AddwithValue("@PwnCount",$PwnCount);
    $objCmd.Parameters.AddwithValue("@Description",$Description);
    $objCmd.Parameters.AddwithValue("@DataClasses",$NewDataClasses);
    $objCmd.Parameters.AddwithValue("@IsVerified",$IsVerified);
    $objCmd.Parameters.AddwithValue("@IsSensitive",$IsSensitive);
    $objCmd.Parameters.AddwithValue("@IsRetired",$IsRetired);
    $objCmd.Parameters.AddwithValue("@IsSpamList",$IsSpamList);
	$objCmd.Parameters.AddwithValue("@Email",$Email);
    $objCmd.ExecuteNonQuery()
}
#>