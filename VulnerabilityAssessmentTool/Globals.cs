/*****************************************
 * VAT - CIS470 Senior Project           *
 * Globals.cs                            *
 * Contains variables and data that      *
 *  remains constatnt throughout the     *
 *  program                              *
 *  *************************************/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections.ObjectModel;
using System.Management.Automation;             // Required for PowerShell
using System.Management.Automation.Runspaces;   // Required for PowerShell
using System.Windows.Forms;                     // Required for MessageBox
using System.Collections;

namespace VulnerabilityAssessmentTool
{
    public static class Globals
    {
        public const string SOFTWARE_SCAN_SCRIPT = "../../SoftwareScanScript.ps1";      // File containing software scan script
        public const string PORT_SCAN_SCRIPT = "../../PortScanScript.ps1";              // File containing port scan script
        public const string PWNED_SCRIPT = "../../PwnedScript.ps1";                     // File containing have I been pwned email checker

        /* Used to run PowerShell scripts
         * ***************************************/
        public static bool RunPowerShellScript(string scriptFile, IDictionary<string, string> parameters)
        {
            try
            {
                RunspaceConfiguration runspaceConfig = RunspaceConfiguration.Create();

                using (Runspace runspace = RunspaceFactory.CreateRunspace(runspaceConfig))
                {
                    runspace.ThreadOptions = PSThreadOptions.UseNewThread; // Run script in new thread
                    runspace.Open();

                    RunspaceInvoke scriptInvoker = new RunspaceInvoke(runspace);
                    scriptInvoker.Invoke("Set-ExecutionPolicy Unrestricted"); // Causing authorization error

                    Pipeline pipeline = runspace.CreatePipeline();
                    Command scriptCommand = new Command(scriptFile);

                    // Add parameters for each parameter passed to method
                    Collection<CommandParameter> cmdParameters = new Collection<CommandParameter>();
                    foreach (KeyValuePair<string, string> entry in parameters)
                    {
                        runspace.SessionStateProxy.SetVariable(entry.Key, entry.Value);
                    }
                    pipeline.Commands.Add(scriptCommand);

                    pipeline.Invoke(); // Execute PowerShell script
                    
                    runspace.Close();
                    return true;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error running PowershellScript: " + ex.Message, "Scan Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return false;
            }
        }
       

    } // End class
} // End namespace
