/*****************************************
 * VAT - CIS470 Senior Project           *
 * Globals.cs                            *
 * Contains variables and data that      *
 *  remains constatnt throughout the     *
 *  program                              *
 *  *************************************/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections.ObjectModel;
using System.Management.Automation;             // Required for PowerShell
using System.Management.Automation.Runspaces;   // Required for PowerShell
using System.Windows.Forms;                     // Required for MessageBox
using System.Collections;

namespace VulnerabilityAssessmentTool
{
    public static class Globals
    {
        public const string SOFTWARE_SCAN_SCRIPT = "../../SoftwareScanScript.ps1";      // File containing software scan script
        public const string SOFTWARE_SCAN_RESULTS = "../../SoftwareScanResults.csv";    // File for storing results of software scan
        public const string PWNED_SCRIPT = "../../PwnedScript.ps1";                     // File containing have I been pwned email checker

        /* Used to run PowerShell scripts
         * ***************************************/
        public static List<string> runPowerShellScript(string scriptFile, List<string> parameters)
        {
            RunspaceConfiguration runspaceConfig = RunspaceConfiguration.Create();

            using (Runspace runspace = RunspaceFactory.CreateRunspace(runspaceConfig))
            {
                runspace.ThreadOptions = PSThreadOptions.UseNewThread; // Run script in new thread
                runspace.Open();

                RunspaceInvoke scriptInvoker = new RunspaceInvoke(runspace);
                scriptInvoker.Invoke("Set-ExecutionPolicy Unrestricted"); // Causing authorization error

                Pipeline pipeline = runspace.CreatePipeline();
                Command scriptCommand = new Command(scriptFile);

                // Add parameters for each parameter passed to method
                Collection<CommandParameter> cmdParameters = new Collection<CommandParameter>();
                foreach (string scriptParam in parameters)
                {
                    CommandParameter cmdParam = new CommandParameter(null, scriptParam);
                    cmdParameters.Add(cmdParam);
                    scriptCommand.Parameters.Add(cmdParam);
                }
                pipeline.Commands.Add(scriptCommand);

                Collection<PSObject> results = pipeline.Invoke(); // Execute PowerShell script

                List<string> powerShellResults = new List<string>();
                foreach (PSObject p in results)
                {
                    Hashtable ht = p.ImmediateBaseObject as Hashtable;
                    powerShellResults.Add(ht["ReturnString"].ToString());
                }
                runspace.Close();
                return powerShellResults;
            }
        }
       

    } // End class
} // End namespace
